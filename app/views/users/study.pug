extends ../layouts/default

block head

    script(type="text/javascript", src="/js/study.js")

block content

    .box-title
        h3 Study

    .box-content
        p This content is from © Copyright 2014,
            a(href="http://www.opentechschool.org/") OpenTechSchool
            | . It's published on
            a(href="https://github.com/OpenTechSchool/html-css-beginners")  GitHub
        h3 Welcome
        p This is a simple and comprehensive guide dedicated to helping beginners learn HTML and CSS.
        p.
            <strong>HTML or HyperText Markup Language</strong> is the main markup language for creating web pages and other information that can
            be displayed in a web browser. You can write your web application in any programming languages, but in the end it will always be
            transformed into HTML because that’s the language of the browser. It is a hierarchical language.
        p.
            <strong>A short bit of history</strong> HTML was developed at the CERN in Switzerland. Its inventor is Tim Berners-Lee. In 1980 he
            wrote his first hypertext system for personal use - the predecessor of HTML. With the first browser and server software the very
            young internet and HTML made their way to conquer the world. In 1992 two copies of a free web browser were downloaded from a
            computer at CERN to a computer in the USA. In 1995 the first Internet Explorer was published.
        p And <strong>HTML5?</strong> What’s that?
        p.
            This is just the latest version of HTML. There is a lot of interest about it, because it improves and adds many HTML elements,
            making it easier to write and to use.
        p <strong>What about CSS?</strong>
        p.
            CSS or Cascading Style Sheets is a language used for describing the look and formatting of a document written in a markup language.
            It is closely connected with HTML, since it gives style to HTML elements. In contrast to HTML, CSS has no hierarchy and can be
            written in the order that we choose.
        p.
            <strong>CSS3</strong> is the last released version of CSS, and it also improves CSS a lot. For example, it gives the possibility
            to animate an element.

        h3 Doctype
        p.
            The first thing on an HTML page is the <strong>doctype</strong>, which as you might guess, tells the browser what type of document it's
            looking at, and how to read it.
        p Thankfully, HTML5's doctype is extremely simple - it's just <code>html</code>.
        pre.prettyprint.
            &lt;!DOCTYPE html&gt;

        h3 Elements and Tags
        p These are the basic building blocks of HTML.
        p.
            <strong>Elements</strong> are what makes up a HTML document. Because you can have zero, one or more elements inside another, this is
            what makes HTML heirarchical. An element can include three things: a tag, attributes, and content.
        p.
            A <strong>Tag</strong> is the thing that indicates an element's purpose. For example, the <code>&lt;p&gt;</code> tag indicates a
            paragraph of text is in that element, and the <code>&lt;li&gt;</code> represents a 'list item'. You'll notice they're always
            surrounded by angle backets. Opening and Closing tags mark the beginning and end of an element and wrap its content, like so:
        pre.prettyprint.
            &lt;p&gt;This is a paragraph.&lt;/p&gt;

        p.
            You can see the closing tag includes a <code>/</code> before its name; otherwise it would be another opening tag!
        p.
            <strong>Always</strong> double-check that you've closed all your elements; otherwise, a browser can and will get mixed up trying to
            understand your HTML document.
        p.
            There are some specific elements that are exceptions to this rule. When elements cannot contain anything else, then
            they don't need to be closed. For example, the following elements are referred to as 'self-closing':
        pre.prettyprint.
            &lt;hr&gt;
            &lt;input&gt;
            &lt;img&gt;

        p There aren't so many of such elements, and you should easily pick up which are which by writing some more code :)
        p Lastly, nesting elements isn\\'t so hard, and is fundamental to how HTML works. It looks just like this:
        pre.prettyprint.
            &lt;p&gt;This is a sentence, with a &lt;span>span&lt;/span&gt; element inside it.&lt;/p&gt;
            &lt;div id="first-heading"&gt;
                &lt;h1&gt;The h1 tags indicates the primary header of the document&lt;/h1&gt;
            &lt;/div&gt;

        p.
            You'll notice that HTML doesn't actually care about the whitespace or newlines between tags. It would end up looking
            the same if the above had been fit onto one line.
        p.
            In the above example, you can see our first case of an <strong>attribute</strong>. It starts with a lowercase name, and then is
            almost always followed by an <code>=</code> and a 'value' that's surrounded in double quotes, <code>"like this"</code>. An element
            can have many attributes, in which case you separate them by spaces, as you'll see soon. Attributes give information about an
            element in particular.
        p.
            In this case, the <code>&lt;div&gt;</code> tag (which is used to divide groups of elements up) has an <code>id</code> attribute
            assigned to <code>first-heading</code>. That's telling us that this section of the document is designed to hold the first heading
            shown on the page. You will learn more about specific attributes later!

        h3 Html and Head Elements
        p.
            Coming back to our file (hope you're coding along!), after the doctype we begin our document with a root <code>html</code> element,
            just like so:
        pre.prettyprint.
            &lt;html&gt;
            &lt;/html&gt;

        p.
            It encompasses every other element in our HTML document, nothing should go outside it! Next, the document is broken up
            into two important parts: The <strong>head</strong> and <strong>body</strong>.
        p.
            The head contains the title of the page & information <strong>about</strong> the page (meta information). Most meta information
            isn't visible to the user, but it has many purposes. For example, meta elements can tell search engines information about your
            page, such as who created it and a description of your page's content. Here's an example <code>head</code> element:
        pre.prettyprint.
            &lt;head&gt;
                &lt;meta charset="UTF-8"&gt;
                &lt;meta name="description" content="Free Web tutorials"&gt;
                &lt;title&gt;My first Portfolio&lt;/title&gt;
            &lt;/head&gt;

        p.
            You can see meta tags are one of the self-closing elements! First off, there is a charset meta tag. This is the most important meta
            tag. Without it your website might not display properly. It is best practice to include it as the first element inside the head
            element. Basically, it specifies to the browser the character encoding for the HTML document. That means your browser will be able
            to read and correctly display all the special characters such as €, $, è and so on. <code>UTF-8</code> is usually the best general
            encoding to use.
        p.
            Here we've also written another type of a meta tag, the description. We define what kind of meta tag it is with the <code>name</code>
            attribute and put our description in the value of the content attribute.
        p.
            Inside our head element, we have lastly written a title of our website. Chuck the above code in your file (inside your
            <code>html</code> element), and change the content of the <code>&lt;title&gt;</code>. Then you can check your document by opening
            your file in a browser and looking at what is written in your browser toolbar. That also provides a title for the page when it is
            added to favorites.
        p Head tags can also include external files or resources, such as CSS or JavaScript files. We will see later how to do this.

        h3 The Body
        p.
            Finally, we are at the place where our content goes. The body contains the actual content of the page. Everything that is contained
            in the body is visible to the user.
        p Just after the closing head tag but still inside the html element, let's add the body tags.
        pre.prettyprint.
            &lt;body&gt;
            &lt;/body&gt;

        p.
            Everything that is written inside this tag will be displayed to the user. Add a <code>&lt;body&gt;</code> to your existing HTML
            document and then write some plain text between the body tags and view it in your browser.
        p <storng>TIP:</strong> To reload the same HTML document in the browser, use the Reload Current Page function (Ctrl-R or F5)

        h3 Types of Content
        p.
            There are different HTML elements that we can use to indicate different types of content in our document, like the tags which we
            have already met. Let's try writing a title, followed by a paragraph.
        pre.prettyprint.
            &lt;body&gt;
                &lt;h1&gt;I'm the title.&lt;/h1&gt;
                &lt;p&gt;And I'm a paragraph!&lt;/p&gt;
            &lt;/body&gt;

        p.
            Heading elements are straightforward to understand. They start from h1 with the biggest font and importance, going to h6 with the
            smallest font.

        h3 Indentation
        p Are you wondering why we wrote the h1 and p tags <i>indented</i> inside the body tags?
        p.
            That will not change at all how the browser reads or interpretates the document, but it is a good practice among developers to
            write code like that in order to have a more clear document and still be able to work with it even after a long time or when there
            is a lot of lines of code. It also shows the heircharcical nature of HTML pretty well.

        h3 Comments
        p.
            It is also possible to put "comments" in your HTML. Comments in HTML are there to remind you (or other people editing the HTML file)
            without changing the way the page displays in a browser.
        p Like other HTML elements, comments are written by using a tag. Although comment tags look a little different:
        pre.prettyprint.
            &lt;!-- I am a comment --&gt;

        p The "start comment" tag is <code>&lt;!--</code> and the "end comment" tag is <code>--&gt;</code>.
        p.
            Comments can also enclose other HTML elements, to "comment them out". This is a useful technique when you're experimenting with a
            page to see how it looks when you change things around.
        p For example, try commenting out the <code>h1</code> heading in your current page:
        pre.prettyprint.
            &lt;body&gt;
                &lt;!-- &lt;h1&gt;I'm the title.&lt;/h1&gt; --&gt;
                &lt;p&gt;And I'm a paragraph!&lt;/p&gt;
            &lt;/body&gt;
        p If you reload the page in your browser, you'll notice the heading has vanished.
        p Remove the comment tags (so the heading appears again) before moving on to the next section.

        h3 Images
        p Headings and paragraphs give you the basics of text. What about images?
        p.
            Images have to kept in separate image files, outside the HTML file. Find a favourite image on the web and save it in the same
            directory as your HTML file (right-click the image in your browser and "Save Image...").
        p.
            If you don't have a picture in mind then <a href="http://www.flickr.com/photos/nengard/67501122/sizes/s/">here's a page with a
            photo of some kittens that you can use</a> (Cute cats on the internet? Egad!)
        p After you have your image, you can include it in your HTML page by using an <code>&lt;img&gt;</code> tag.
        pre.prettyprint.
            &lt;img src="kittens.jpg"&gt;

        p.
            Add the <code>&lt;img&gt;</code> tag anywhere inside the <code>body</code> of your HTML document where you'd like the image to
            appear. Replace <code>kittens.jpg</code> with the file name of the image that you saved in the same directory as the HTML file.
        p.
            Notice that <code>&lt;img&gt;</code> is one of the tags that doesn't need a separate closing tag. You could put
            <code>&lt;/img&gt;</code> after the tag if you like, it doesn't change the way the browser views the page.
        p.
            <strong>TIP:</strong> The image source name <code>src</code> of <code>kittens.jpg</code> is a path relative to the HTML document.
            So in this case kittens.jpg is located in the same directory, but you could use a name like <code>images/kittens.jpg</code> if
            you put the image file into a subdirectory called <code>images</code>. You can even use full URLs like
            <code>http://website.com/kittens.jpg</code>, but it's best to avoid this if you can use a relative path instead.

        h3 Alt Text
        p A good habit to get into is using <code>alt</code> text to describe the contents of an image:
        pre.prettyprint.
            &lt;img src="kittens.jpg" alt="Some kittens"&gt;

        p.
            The alt text is a textual description of what's in the image. This is important for anyone who can't see the images (for instance
            vision impaired people using a screenreader.) Any image that isn\\'t purely decorative should have a description set with the
            <code>alt</code> attribute.

        h3 Putting it all together
        p So far, our entire document might look like this:
        pre.prettyprint.
            &lt;!DOCTYPE html&gt;
            &lt;html&gt;
                &lt;head&gt;
                    &lt;meta charset="UTF-8"&gt;
                    &lt;meta name="description" content="Free Web tutorials"&gt;
                    &lt;title>My first Portfolio&lt;/title&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    &lt;h1&gt;I'm the title.&lt;/h1&gt;
                    &lt;p&gt;And I'm a paragraph!&lt;/p&gt;
                    &lt;p&gt;
                        &lt;img src="kittens.jpg" alt="All the kittens are shown here"&gt;
                    &lt;/p&gt;
                    &lt;h3&gt;This is a sub-heading...&lt;/h3&gt;
                    &lt;p&gt;Well now we're just blathering on.&lt;/p&gt;
                &lt;/body&gt;
            &lt;/html&gt;

        p Notice that the kitten image is part of its own paragraph here, so it is shown on a new line in the browser.
        p.
            Hopefully the document in your file looks similar, but not exactly the same. You might have changed some of the text... does it
            all work in your browser?

        h3 Why not use Word?
        p You might wonder why you're writing all these elements by hand, when you could make up the same stuff in a Word document.
        p.
            Well, think about some of the cooler websites around that you've seen on the web, and their complex layouts. Do you think you
            could replicate them using Word? How long might it take? That's the power of manual control that HTML (and CSS, and Javascript)
            gives to the web and web developers. You can learn it too!

        h3 What's next?
        p You may be thinking at this stage that your HTML page looks pretty bland. How can you spice it up a little?
        p Read on to find out in the next section, <a href="">your first styled Hello World!</a>.
